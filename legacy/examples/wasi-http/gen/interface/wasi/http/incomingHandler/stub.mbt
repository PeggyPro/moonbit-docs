// Generated by `wit-bindgen` 0.36.0.

///|
/// This function is invoked with an incoming HTTP Request, and a resource
/// `response-outparam` which provides the capability to reply with an HTTP
/// Response. The response is sent by calling the `response-outparam.set`
/// method, which allows execution to continue after the response has been
/// sent. This enables both streaming to the response body, and performing other
/// work.
///
/// The implementor of this function must write a response to the
/// `response-outparam` before returning, or else the caller will respond
/// with an error on its behalf.
pub fn handle(
  request : @types.IncomingRequest,
  response_out : @types.ResponseOutparam,
) -> Unit {
  let path = request.path_with_query()
  let headers = @types.Fields::fields()
  let response = @types.OutgoingResponse::outgoing_response(headers)
  match path {
    None | Some("/") => {
      response.set_status_code(200).unwrap()
      // Get the body
      guard response.body() is Ok(body)
      defer body.finish(None).unwrap()
      // Establish the conncetion
      response_out.set(Ok(response))
      // Write to the body
      guard body.write() is Ok(stream)
      defer stream.drop()
      stream
      .write(FixedArray::from_iter(@encoding/utf8.encode("Hello World").iter()))
      .unwrap()
    }
    Some(p) => {
      response.set_status_code(404).unwrap()
      guard response.body() is Ok(body)
      defer body.finish(None).unwrap()
      response_out.set(Ok(response))
      guard body.write() is Ok(stream)
      defer stream.drop()
      stream
      .write(
        FixedArray::from_iter(@encoding/utf8.encode("Not found: \{p}").iter()),
      )
      .unwrap()
    }
  }
}
