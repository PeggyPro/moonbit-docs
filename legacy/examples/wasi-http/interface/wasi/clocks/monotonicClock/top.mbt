// Generated by `wit-bindgen` 0.45.0. DO NOT EDIT!
///|
/// Read the current value of the clock.
///
/// The clock is monotonic, therefore calling this function repeatedly will
/// produce a sequence of non-decreasing values.
pub fn now() -> UInt64 {
  let result : Int64 = wasmImportNow()
  return result.reinterpret_as_uint64()
}

///|
/// Query the resolution of the clock. Returns the duration of time
/// corresponding to a clock tick.
pub fn resolution() -> UInt64 {
  let result : Int64 = wasmImportResolution()
  return result.reinterpret_as_uint64()
}

///|
/// Create a `pollable` which will resolve once the specified instant
/// has occurred.
pub fn subscribe_instant(when : UInt64) -> @poll.Pollable {
  let result : Int = wasmImportSubscribeInstant(when.reinterpret_as_int64())
  return @poll.Pollable::Pollable(result)
}

///|
/// Create a `pollable` that will resolve after the specified duration has
/// elapsed from the time this function is invoked.
pub fn subscribe_duration(when : UInt64) -> @poll.Pollable {
  let result : Int = wasmImportSubscribeDuration(when.reinterpret_as_int64())
  return @poll.Pollable::Pollable(result)
}
